{"version":3,"sources":["../../server/helpers/validators.js"],"names":["isPositiveInteger","test","s","verifyOrderInput","req","res","next","orderInput","body","shouldExit","orderItem","productsArray","attendantId","Array","length","duplicateProductsId","Map","every","inputProduct","get","String","productId","status","send","error","set","product","productsMap","inputProductQuantity","quantity","storeQuantity","push","pricePerProduct","price","name","id"],"mappings":"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","file":"validators.js","sourcesContent":["import { productsMap } from '../models/products';\r\n\r\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\r\n\r\n\r\nconst verifyOrderInput = (req, res, next) => {\r\n  const orderInput = req.body;\r\n  let shouldExit = false;\r\n  const orderItem = { productsArray: [] };\r\n  if (orderInput && orderInput.attendantId && isPositiveInteger(orderInput.attendantId)) {\r\n    orderItem.attendantId = orderInput.attendantId;\r\n    const { productsArray } = orderInput;\r\n    if (productsArray instanceof Array && productsArray.length > 0) {\r\n      const duplicateProductsId = new Map();\r\n      productsArray.every((inputProduct) => {\r\n        if (duplicateProductsId.get(String(inputProduct.productId))) {\r\n          res.status(400).send({\r\n            error: `product with id ${inputProduct.productId} is ordered twice`,\r\n            status: 400,\r\n          });\r\n          shouldExit = true;\r\n          return false;\r\n        }\r\n        duplicateProductsId.set(String(inputProduct.productId), 'dummy');\r\n\r\n        const product = productsMap.get(String(inputProduct.productId));\r\n        if (product) {\r\n          const inputProductQuantity = inputProduct.quantity;\r\n          if (isPositiveInteger(inputProductQuantity)) {\r\n            const storeQuantity = product.quantity;\r\n            if (storeQuantity >= inputProductQuantity) {\r\n              orderItem.productsArray.push({\r\n                productId: inputProduct.productId,\r\n                quantity: inputProductQuantity,\r\n                pricePerProduct: product.price,\r\n              });\r\n              return true;\r\n            }\r\n            res.status(400).send({\r\n              error: `order quantity (${inputProductQuantity}) of ${product.name} with id: ${product.id} is more than available quantity (${storeQuantity})`,\r\n              status: 400,\r\n            });\r\n            shouldExit = true;\r\n            return false;\r\n          }\r\n          shouldExit = true;\r\n          res.status(400).send({\r\n            error: 'Product quantity should be a positive integer',\r\n            status: 400,\r\n          });\r\n          return false;\r\n        }\r\n        shouldExit = true;\r\n        res.status(400).send({\r\n          error: `Product with id ${inputProduct.productId} does not exist`,\r\n          status: 400,\r\n        });\r\n        return false;\r\n      });\r\n    } else {\r\n      shouldExit = true;\r\n      res.status(400).send({\r\n        error: 'Array containing products should be provided',\r\n        status: 400,\r\n      });\r\n    }\r\n  } else {\r\n    shouldExit = true;\r\n    res.status(403).send({\r\n      error: 'Only attendants can create sales orders. Please specify a valid attendant id',\r\n      status: 403,\r\n    });\r\n    return false;\r\n  }\r\n  if (!shouldExit) {\r\n    req.orderItem = orderItem;\r\n    return next();\r\n  }\r\n  return false;\r\n};\r\nexport { verifyOrderInput, isPositiveInteger };\r\n"]}