{"version":3,"sources":["../../server/test/products.test.js"],"names":["describe","it","app","post","send","name","minInvent","quantity","level","price","set","expect","then","response","body","message","toContain","products","productsList","length","toBe","lastId","error","get","toEqual","arrayContaining","id","created","product"],"mappings":"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","file":"products.test.js","sourcesContent":["import expect from 'expect';\r\nimport request from 'supertest';\r\nimport app from '../app';\r\nimport { products } from '../models/products';\r\n\r\ndescribe('POST /products', () => {\r\n  it('should add a new product with valid parameters', () => request(app)\r\n    .post('/api/v1/products')\r\n    .send({\r\n      name: '3D Printer',\r\n      minInvent: 18,\r\n      quantity: 500,\r\n      level: 2,\r\n      price: 9,\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('3D Printer');\r\n      expect(products.productsList.length).toBe(3);\r\n      expect(products.lastId).toBe(3);\r\n    }));\r\n\r\n  it('should not add a new product with invalid parameters', () => request(app)\r\n    .post('/api/v1/products')\r\n    .send({\r\n      name: 'Wireless Printer',\r\n      minInvent: 0,\r\n      quantity: 200,\r\n      level: 2,\r\n      price: 5,\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('Product name must be at least 3 characters');\r\n      expect(products.productsList.length).toBe(3);\r\n      expect(products.lastId).toBe(3);\r\n    }));\r\n  it('should not allow non-admin to add product', () => request(app)\r\n    .post('/api/v1/products')\r\n    .send({\r\n      name: '3D Printer',\r\n      minInvent: 18,\r\n      quantity: 500,\r\n      level: 1,\r\n      price: 12,\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('not allowed to modify');\r\n      expect(products.productsList.length).toBe(3);\r\n      expect(products.lastId).toBe(3);\r\n    }));\r\n});\r\n\r\n\r\ndescribe('GET /products', () => {\r\n  it('should return all available products', () => request(app)\r\n    .get('/api/v1/products')\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.length).toBe(3);\r\n      expect(response.body).toEqual(\r\n        expect.arrayContaining([{\r\n          id: 1,\r\n          quantity: 12,\r\n          minInvent: 3,\r\n          name: 'Otis Headphone',\r\n          created: '2018-10-14T06:33:09.250Z',\r\n          price: 18,\r\n        }]),\r\n      );\r\n    }));\r\n});\r\n\r\ndescribe('GET /products:id', () => {\r\n  it('should return the product with id equals :id', () => request(app)\r\n    .get('/api/v1/products/2')\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('found');\r\n      expect(response.body.product).toEqual({\r\n        id: 2,\r\n        quantity: 10,\r\n        minInvent: 5,\r\n        name: 'Extreme GPS',\r\n        created: '2018-10-14T06:38:20.250Z',\r\n        price: 7,\r\n      });\r\n    }));\r\n  it('should return error with invalid product id', () => request(app)\r\n    .get('/api/v1/products/10')\r\n    .set('Accept', 'application/json')\r\n    .expect(404)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('cannot find');\r\n    }));\r\n});\r\n"]}