{"version":3,"sources":["../../server/test/sales.test.js"],"names":["describe","it","app","post","send","attendantId","productsArray","productId","quantity","set","expect","then","response","body","message","toContain","productsMap","get","String","toBe","orders","ordersList","length","lastOrderId","ordersMap","toBeTruthy","totalPrice","error","query","level","orderDetails","orderId"],"mappings":"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","file":"sales.test.js","sourcesContent":["import expect from 'expect';\r\nimport request from 'supertest';\r\nimport app from '../app';\r\nimport { productsMap } from '../models/products';\r\nimport { orders, ordersMap } from '../models/orders';\r\n\r\ndescribe('POST /sales', () => {\r\n  it('should create a new order with valid body input', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [{\r\n        productId: 1,\r\n        quantity: 10,\r\n      },\r\n      {\r\n        productId: 2,\r\n        quantity: 3,\r\n      }],\r\n\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('Successfully created');\r\n      expect(productsMap.get(String(1)).quantity).toBe(2);\r\n      expect(orders.ordersList.length).toBe(2);\r\n      expect(orders.lastOrderId).toBe(2);\r\n      expect(ordersMap.get(String(2))).toBeTruthy();\r\n      expect(ordersMap.get(String(2)).totalPrice).toBe(201);\r\n    }));\r\n\r\n  it('should return error with invalid attendantId', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: -10,\r\n      productsArray: [{\r\n        productId: 1,\r\n        quantity: 10,\r\n      },\r\n      {\r\n        productId: 2,\r\n        quantity: 3,\r\n      }],\r\n\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('specify a valid attendant id');\r\n    }));\r\n\r\n  it('should return error with invalid or empty products array', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [],\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('products should be provided');\r\n    }));\r\n\r\n  it('should return error with duplicate product id order', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [{\r\n        productId: 1,\r\n        quantity: 1,\r\n      },\r\n      {\r\n        productId: 1,\r\n        quantity: 1,\r\n      }],\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('is ordered twice');\r\n    }));\r\n\r\n  it('should return error with invalid product id', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [{\r\n        productId: 13,\r\n        quantity: 1,\r\n      },\r\n      {\r\n        productId: 1,\r\n        quantity: 1,\r\n      }],\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('does not exist');\r\n    }));\r\n\r\n  it('should return error with negative product quantity', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [{\r\n        productId: 1,\r\n        quantity: -10,\r\n      },\r\n      {\r\n        productId: 2,\r\n        quantity: 3,\r\n      }],\r\n\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('quantity should be a positive integer');\r\n    }));\r\n\r\n  it('should return error with order quantity greater than available quantity', () => request(app)\r\n    .post('/api/v1/sales')\r\n    .send({\r\n      attendantId: 10,\r\n      productsArray: [{\r\n        productId: 1,\r\n        quantity: 10,\r\n      },\r\n      {\r\n        productId: 2,\r\n        quantity: 3,\r\n      }],\r\n\r\n    })\r\n    .set('Accept', 'application/json')\r\n    .expect(400)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('is more than available quantity');\r\n    }));\r\n});\r\n\r\ndescribe('GET /sales', () => {\r\n  it('should return all sales order for an admin', () => request(app)\r\n    .get('/api/v1/sales')\r\n    .query({ level: 2 })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.orders.length).toBe(2);\r\n      expect(response.body.message).toContain('Successfully fetched');\r\n    }));\r\n\r\n  it('should return error for a non admin request', () => request(app)\r\n    .get('/api/v1/sales')\r\n    .query({ level: 1 })\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('not allowed to access');\r\n      expect(orders.ordersList.length).toBe(2);\r\n    }));\r\n});\r\n\r\ndescribe('GET /sales:id', () => {\r\n  it('should return the sale record for an admin', () => request(app)\r\n    .get('/api/v1/sales/1')\r\n    .query({ level: 2 })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('Successfully fetched');\r\n      expect(response.body.orderDetails.orderId).toBe(1);\r\n    }));\r\n\r\n  it('should return invalid sale record for an admin with invalid order id', () => request(app)\r\n    .get('/api/v1/sales/12')\r\n    .query({ level: 2 })\r\n    .set('Accept', 'application/json')\r\n    .expect(404)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('Invalid order');\r\n    }));\r\n\r\n  it('should return the sale record for an the attendant that generated the record', () => request(app)\r\n    .get('/api/v1/sales/1')\r\n    .query({ attendantId: 1 })\r\n    .set('Accept', 'application/json')\r\n    .expect(200)\r\n    .then((response) => {\r\n      expect(response.body.message).toContain('Successfully fetched');\r\n      expect(response.body.orderDetails.orderId).toBe(1);\r\n    }));\r\n\r\n  it('should return access error for an attendant with invalid order id', () => request(app)\r\n    .get('/api/v1/sales/12')\r\n    .query({ attendantId: 1 })\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('not allowed');\r\n    }));\r\n\r\n\r\n  it('should return access error if attendant did not generate the record', () => request(app)\r\n    .get('/api/v1/sales/1')\r\n    .query({ attendantId: 10 })\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('not allowed');\r\n    }));\r\n\r\n  it('should return access error if attendant id not provided', () => request(app)\r\n    .get('/api/v1/sales/1')\r\n    .set('Accept', 'application/json')\r\n    .expect(403)\r\n    .then((response) => {\r\n      expect(response.body.error).toContain('not allowed');\r\n    }));\r\n});\r\n"]}